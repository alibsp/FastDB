digraph "GiSTobject"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{GiSTobject\n||+ IsA()\l+ Copy()\l+ IsEqual()\l+ ~GiSTobject()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{BTintkey\n||+ BTintkey()\l+ BTintkey()\l+ BTintkey()\l+ Copy()\l+ ~BTintkey()\l+ IsA()\l+ operator==()\l+ Compare()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classBTintkey.html",tooltip=" "];
  Node1 -> Node3 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{BTkey\n|+ type\l+ key\l+ len\l|+ BTkey()\l+ BTkey()\l+ Set()\l+ BTkey()\l+ operator=()\l+ BTkey()\l+ ~BTkey()\l+ Compare()\l+ operator\<()\l+ operator\<=()\l+ operator==()\l+ operator!=()\l+ operator\>=()\l+ operator\>()\l+ Print()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classBTkey.html",tooltip=" "];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{GiST\n||+ GiST()\l+ IsA()\l+ Create()\l+ Open()\l+ Close()\l+ Search()\l+ Insert()\l+ Delete()\l+ Sync()\l+ Store()\l+ IsOpen()\l+ IsOrdered()\l+ ForcedReinsert()\l+ ~GiST()\l# CreateStore()\l# CreateNode()\l# RemoveTop()\l# RemoveRatio()\l# ReadNode()\l# WriteNode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classGiST.html",tooltip=" "];
  Node4 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{BT\n|# db\l|+ IsA()\l+ BT()\l# CreateNode()\l# CreateStore()\l# IsOrdered()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classBT.html",tooltip=" "];
  Node4 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{RT\n|# db\l|+ IsA()\l+ RT()\l+ IsA()\l+ RT()\l# CreateNode()\l# CreateStore()\l# ForcedReinsert()\l# RemoveTop()\l# CreateNode()\l# CreateStore()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRT.html",tooltip=" "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{GiSTcursor\n||+ GiSTcursor()\l+ Next()\l+ IsA()\l+ ~GiSTcursor()\l+ Path()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classGiSTcursor.html",tooltip=" "];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{GiSTentry\n|# node\l# ptr\l# position\l# level\l# key\l|+ GiSTentry()\l+ GiSTentry()\l+ GiSTentry()\l+ ~GiSTentry()\l+ Penalty()\l+ CompressedLength()\l+ Copy()\l+ Compress()\l+ Decompress()\l+ Compare()\land 11 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classGiSTentry.html",tooltip=" "];
  Node8 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node9 [label="{BTentry\n||+ BTentry()\l+ BTentry()\l+ BTentry()\l+ BTentry()\l+ ~BTentry()\l+ IsA()\l+ Copy()\l+ IsEqual()\l+ Penalty()\l+ Compress()\land 9 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classBTentry.html",tooltip=" "];
  Node8 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{RTentry\n||+ RTentry()\l+ RTentry()\l+ RTentry()\l+ ~RTentry()\l+ Penalty()\l+ CompressedLength()\l+ Copy()\l+ IsA()\l+ IsEqual()\l+ bbox()\land 28 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRTentry.html",tooltip=" "];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node11 [label="{GiSTnode\n||+ GiSTnode()\l+ GiSTnode()\l+ IsA()\l+ operator[]()\l+ operator[]()\l+ Expand()\l+ NumEntries()\l+ SetNumEntries()\l+ SearchPtr()\l+ SearchMinPenalty()\land 26 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classGiSTnode.html",tooltip=" "];
  Node11 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{BTnode\n||+ IsA()\l+ Copy()\l+ Union()\l+ CreateEntry()\l+ Insert()\l+ InsertBefore()\l+ Coalesce()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classBTnode.html",tooltip=" "];
  Node11 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{RTnode\n||+ IsA()\l+ CreateEntry()\l+ FixedLength()\l+ Copy()\l+ RTUnionEntries()\l+ PickSplit()\l+ Union()\l+ IsA()\l+ Copy()\l+ PickSplit()\l+ Union()\l+ CreateEntry()\l+ FixedLength()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRTnode.html",tooltip=" "];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{GiSTpath\n||+ GiSTpath()\l+ GiSTpath()\l+ Clear()\l+ MakeParent()\l+ MakeSibling()\l+ MakeChild()\l+ MakeRoot()\l+ SplitRoot()\l+ operator=()\l+ operator==()\l+ Page()\l+ Parent()\l+ IsRoot()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classGiSTpath.html",tooltip=" "];
  Node1 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node15 [label="{GiSTpredicate\n||+ IsA()\l+ Consistent()\l+ ~GiSTpredicate()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classGiSTpredicate.html",tooltip=" "];
  Node15 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node16 [label="{AndPredicate\n||+ AndPredicate()\l+ Consistent()\l+ Copy()\l+ ~AndPredicate()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classAndPredicate.html",tooltip=" "];
  Node15 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node17 [label="{BTpredicate\n||+ BTpredicate()\l+ BTpredicate()\l+ Copy()\l+ IsA()\l+ Consistent()\l+ SetOper()\l+ SetValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classBTpredicate.html",tooltip=" "];
  Node15 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node18 [label="{NotPredicate\n||+ NotPredicate()\l+ Consistent()\l+ Copy()\l+ ~NotPredicate()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classNotPredicate.html",tooltip=" "];
  Node15 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node19 [label="{OrPredicate\n||+ OrPredicate()\l+ Consistent()\l+ Copy()\l+ ~OrPredicate()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classOrPredicate.html",tooltip=" "];
  Node15 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node20 [label="{PtrPredicate\n||+ PtrPredicate()\l+ Consistent()\l+ Copy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classPtrPredicate.html",tooltip=" "];
  Node15 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node21 [label="{RTpredicate\n||+ RTpredicate()\l+ RTpredicate()\l+ Copy()\l+ IsA()\l+ Consistent()\l+ SetOper()\l+ SetValue()\l+ RTpredicate()\l+ RTpredicate()\l+ Copy()\l+ IsA()\l+ Consistent()\l+ SetOper()\l+ SetValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRTpredicate.html",tooltip=" "];
  Node15 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node22 [label="{TruePredicate\n||+ TruePredicate()\l+ Consistent()\l+ Copy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTruePredicate.html",tooltip=" "];
  Node1 -> Node23 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal"];
  Node23 [label="{RTkey\n|+ RTentry\l+ xl\l+ xh\l+ yl\l+ yh\l|+ RTkey()\l+ RTkey()\l+ RTkey()\l+ RTkey()\l+ Copy()\l+ ~RTkey()\l+ IsA()\l+ operator=()\l+ operator==()\l+ overlap()\land 24 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRTkey.html",tooltip=" "];
}
